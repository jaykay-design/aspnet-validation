{"version":3,"file":"aspnet-validation.min.js","mappings":"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","sources":["webpack://aspnetValidation/webpack/universalModuleDefinition","webpack://aspnetValidation/webpack/bootstrap","webpack://aspnetValidation/webpack/runtime/define property getters","webpack://aspnetValidation/webpack/runtime/hasOwnProperty shorthand","webpack://aspnetValidation/webpack/runtime/make namespace object","webpack://aspnetValidation/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * A simple IDictionary<string, string>\r\n */\r\nexport interface StringKeyValuePair {\r\n    [key: string]: string\r\n}\r\n\r\n/**\r\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\r\n */\r\ninterface ElementUID {\r\n    node: Element,\r\n    uid: string;\r\n}\r\n\r\n/**\r\n * Parameters passed into validation providers from the element attributes.\r\n * error property is read from data-val-[Provider Name] attribute.\r\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\r\n */\r\nexport interface ValidationDirectiveBindings {\r\n    error: string,\r\n    params: StringKeyValuePair\r\n}\r\n\r\n/**\r\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\r\n */\r\nexport type ValidationDirective = {\r\n    [key: string]: ValidationDirectiveBindings\r\n};\r\n\r\n/**\r\n * Validation plugin signature with multitype return.\r\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\r\n * String return signifies failed validation, which then will be used as the validation error message.\r\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\r\n */\r\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\r\n\r\n/**\r\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\r\n */\r\ntype Validator = () => Promise<boolean>;\r\n\r\n/**\r\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\r\n * @param elementName \r\n */\r\nfunction getRelativeFormElement(elementName: string, selector: string) {\r\n    // example elementName: Form.PasswordConfirm, Form.Email\r\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\r\n    // example result element name: Form.Password, __RequestVerificationToken\r\n\r\n    let realSelector = selector.substr(2); // Password, __RequestVerificationToken\r\n    let objectName = '';\r\n\r\n    let dotLocation = elementName.lastIndexOf('.');\r\n    if (dotLocation > -1) {\r\n        // Form\r\n        objectName = elementName.substr(0, dotLocation);\r\n\r\n        // Form.Password\r\n        let relativeElementName = objectName + '.' + realSelector;\r\n        let relativeElement = document.getElementsByName(relativeElementName)[0];\r\n        if (relativeElement) {\r\n            return relativeElement;\r\n        }\r\n    }\r\n\r\n    // __RequestVerificationToken\r\n    return document.getElementsByName(realSelector)[0];\r\n}\r\n\r\n/**\r\n * Contains default implementations for ASP.NET Core MVC validation attributes.\r\n */\r\nexport class MvcValidationProviders {\r\n    /**\r\n     * Validates whether the input has a value.\r\n     */\r\n    required: ValidationProvider = (value, element, params) => {\r\n        return Boolean(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies the length contstraint.\r\n     */\r\n    stringLength: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseInt(params.min);\r\n            if (value.length < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseInt(params.max);\r\n            if (value.length > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is equal to another input value.\r\n     */\r\n    compare: ValidationProvider = (value, element, params) => {\r\n        if (!params.other) {\r\n            return true;\r\n        }\r\n\r\n        let otherElement = getRelativeFormElement(element.name, params.other) as HTMLInputElement;\r\n        if (!otherElement) {\r\n            return true;\r\n        }\r\n\r\n        return (otherElement.value === value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a number within a given range.\r\n     */\r\n    range: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        let val = parseFloat(value);\r\n        if (isNaN(val)) {\r\n            return false;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseFloat(params.min);\r\n            if (val < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseFloat(params.max);\r\n            if (val > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies a regular expression pattern.\r\n     */\r\n    regex: ValidationProvider = (value, element, params) => {\r\n        if (!value || !params.pattern) {\r\n            return true;\r\n        }\r\n\r\n        let r = new RegExp(params.pattern);\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\r\n     */\r\n    email: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // RFC822 email address with .TLD validation\r\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\r\n        // https://gist.github.com/badsyntax/719800\r\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\r\n\r\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\r\n     */\r\n    creditcard: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) jquery-validation, MIT Licensed\r\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\r\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\r\n\r\n        // Accept only spaces, digits and dashes\r\n        if (/[^0-9 \\-]+/.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        var nCheck = 0,\r\n            nDigit = 0,\r\n            bEven = false,\r\n            n, cDigit;\r\n\r\n        value = value.replace(/\\D/g, \"\");\r\n\r\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\r\n        if (value.length < 13 || value.length > 19) {\r\n            return false;\r\n        }\r\n\r\n        for (n = value.length - 1; n >= 0; n--) {\r\n            cDigit = value.charAt(n);\r\n            nDigit = parseInt(cDigit, 10);\r\n            if (bEven) {\r\n                if ((nDigit *= 2) > 9) {\r\n                    nDigit -= 9;\r\n                }\r\n            }\r\n\r\n            nCheck += nDigit;\r\n            bEven = !bEven;\r\n        }\r\n\r\n        return (nCheck % 10) === 0;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a URL.\r\n     */\r\n    url: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) Diego Perini, MIT Licensed\r\n        // https://gist.github.com/dperini/729294\r\n\r\n        var r = new RegExp(\r\n            \"^\" +\r\n            // protocol identifier\r\n            \"(?:(?:https?|ftp)://)\" +\r\n            // user:pass authentication\r\n            \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n            \"(?:\" +\r\n            // IP address exclusion\r\n            // private & local networks\r\n            \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n            \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n            \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\r\n            // IP address dotted notation octets\r\n            // excludes loopback network 0.0.0.0\r\n            // excludes reserved space >= 224.0.0.0\r\n            // excludes network & broacast addresses\r\n            // (first & last IP address of each class)\r\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n            \"|\" +\r\n            // host name\r\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n            // domain name\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n            // TLD identifier\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n            // TLD may end with dot\r\n            \"\\\\.?\" +\r\n            \")\" +\r\n            // port number\r\n            \"(?::\\\\d{2,5})?\" +\r\n            // resource path\r\n            \"(?:[/?#]\\\\S*)?\" +\r\n            \"$\", \"i\"\r\n        );\r\n\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a phone number.\r\n     */\r\n    phone: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // Allows whitespace or dash as number separator because some people like to do that...\r\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\r\n        if (consecutiveSeparator.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        let r = /^\\+?[0-9\\-\\s]+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously validates the input value to a JSON GET API endpoint. \r\n     */\r\n    remote: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // params.additionalfields: *.Email,*.Username\r\n        let fieldSelectors: string[] = (params.additionalfields as string).split(',');\r\n        let fields: StringKeyValuePair = {};\r\n\r\n        for (let fieldSelector of fieldSelectors) {\r\n            let fieldName = fieldSelector.substr(2);\r\n            let fieldElement = getRelativeFormElement(element.name, fieldSelector) as HTMLInputElement;\r\n\r\n            let hasValue = Boolean(fieldElement && fieldElement.value);\r\n            if (!hasValue) {\r\n                continue;\r\n            }\r\n\r\n            fields[fieldName] = fieldElement.value;\r\n        }\r\n\r\n        let url: string = params['url'];\r\n        // console.log(fields);\r\n\r\n        let encodedParams: string[] = [];\r\n        for (let fieldName in fields) {\r\n            let encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\r\n            encodedParams.push(encodedParam);\r\n        }\r\n        let payload = encodedParams.join('&');\r\n        // console.log(payload);\r\n\r\n        return new Promise((ok, reject) => {\r\n            let request = new XMLHttpRequest();\r\n\r\n            if (params.type === 'Post') {\r\n                let postData = new FormData();\r\n                for (let fieldName in fields) {\r\n                    postData.append(fieldName, fields[fieldName]);\r\n                }\r\n                request.open('post', url);\r\n                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n                request.send(payload);\r\n            } else {\r\n                request.open('get', url + '?' + payload);\r\n                request.send();\r\n            }\r\n\r\n            request.onload = e => {\r\n                if (request.status >= 200 && request.status < 300) {\r\n                    let data = JSON.parse(request.responseText);\r\n                    ok(data);\r\n                } else {\r\n                    reject({\r\n                        status: request.status,\r\n                        statusText: request.statusText,\r\n                        data: request.responseText\r\n                    });\r\n                }\r\n            };\r\n\r\n            request.onerror = e => {\r\n                reject({\r\n                    status: request.status,\r\n                    statusText: request.statusText,\r\n                    data: request.responseText\r\n                });\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Responsibles for managing the DOM elements and running the validation providers.\r\n */\r\nexport class ValidationService {\r\n    /**\r\n     * A key-value collection of loaded validation plugins. \r\n     */\r\n    private providers: { [name: string]: ValidationProvider } = {};\r\n\r\n    /**\r\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\r\n     */\r\n    private messageFor: { [id: string]: Element[] } = {};\r\n\r\n    /**\r\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\r\n     */\r\n    private elementUIDs: ElementUID[] = [];\r\n\r\n    /**\r\n     * A key-value collection of UID to Element for quick lookup. \r\n     */\r\n    private elementByUID: { [uid: string]: Element } = {};\r\n\r\n    /**\r\n     * A key-value collection of input UIDs for a <form> UID.\r\n     */\r\n    private formInputs: { [formUID: string]: string[] } = {};\r\n\r\n    /**\r\n     * A key-value map for input UID to its validator factory.\r\n     */\r\n    private validators: { [inputUID: string]: Validator } = {};\r\n\r\n    /**\r\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\r\n     */\r\n    private elementEvents: { [id: string]: (Event) => any } = {};\r\n\r\n    /**\r\n     * A key-value map of input UID to its validation error message.\r\n     */\r\n    private summary: StringKeyValuePair = {};\r\n\r\n    /**\r\n     * A serialized representation of the validation error message summary rendered to the user.\r\n     */\r\n    private renderedSummaryJSON: string;\r\n\r\n    /**\r\n     * In milliseconds, the rate of fire of the input validation.\r\n     */\r\n    debounce = 300;\r\n\r\n    /** \r\n     * Callback triggered when form is submitted and valid \r\n     * */\r\n    afterValidation: ((form: HTMLFormElement) => void ) | undefined;\r\n\r\n    /**\r\n     * Registers a new validation plugin of the given name, if not registered yet.\r\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\r\n     * @param name \r\n     * @param callback \r\n     */\r\n    addProvider(name: string, callback: ValidationProvider) {\r\n        if (this.providers[name]) {\r\n            // First-Come-First-Serve validation plugin design.\r\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\r\n            return;\r\n        }\r\n        this.providers[name] = callback;\r\n    }\r\n\r\n    /**\r\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation. \r\n     */\r\n    private addMvcProviders() {\r\n        let mvc = new MvcValidationProviders();\r\n\r\n        // [Required]\r\n        this.addProvider('required', mvc.required);\r\n        // [StringLength], [MinLength], [MaxLength]\r\n        this.addProvider('length', mvc.stringLength);\r\n        this.addProvider('maxlength', mvc.stringLength);\r\n        this.addProvider('minlength', mvc.stringLength);\r\n        // [Compare]\r\n        this.addProvider('equalto', mvc.compare);\r\n        // [Range]\r\n        this.addProvider('range', mvc.range);\r\n        // [RegularExpression]\r\n        this.addProvider('regex', mvc.regex);\r\n        // [CreditCard]\r\n        this.addProvider('creditcard', mvc.creditcard);\r\n        // [EmailAddress]\r\n        this.addProvider('email', mvc.email);\r\n        // [Url]\r\n        this.addProvider('url', mvc.url);\r\n        // [Phone]\r\n        this.addProvider('phone', mvc.phone);\r\n        // [Remote]\r\n        this.addProvider('remote', mvc.remote);\r\n    }\r\n\r\n    /**\r\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\r\n     */\r\n    private scanMessages() {\r\n        let validationMessageElements = document.querySelectorAll('[data-valmsg-for]');\r\n\r\n        for (let i = 0; i < validationMessageElements.length; i++) {\r\n            let e = validationMessageElements[i];\r\n            let name = e.getAttribute('data-valmsg-for');\r\n\r\n            if (!this.messageFor[name]) {\r\n                this.messageFor[name] = [];\r\n            }\r\n\r\n            this.messageFor[name].push(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given attribute map for an HTML input, returns the validation directives to be executed. \r\n     * @param attributes \r\n     */\r\n    parseDirectives(attributes: NamedNodeMap) {\r\n        let directives: ValidationDirective = {};\r\n        let validationAtributes: StringKeyValuePair = {};\r\n\r\n        let cut = 'data-val-'.length;\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            let a = attributes[i];\r\n            if (a.name.indexOf('data-val-') === 0) {\r\n                let key = a.name.substr(cut);\r\n                validationAtributes[key] = a.value;\r\n            }\r\n        }\r\n\r\n        for (let key in validationAtributes) {\r\n            if (key.indexOf('-') === -1) {\r\n                let parameters = Object.keys(validationAtributes).filter(Q => {\r\n                    return (Q !== key) && (Q.indexOf(key) === 0);\r\n                });\r\n\r\n                let directive: ValidationDirectiveBindings = {\r\n                    error: validationAtributes[key],\r\n                    params: {}\r\n                };\r\n\r\n                let pcut = (key + '-').length;\r\n                for (let i = 0; i < parameters.length; i++) {\r\n                    let pvalue = validationAtributes[parameters[i]];\r\n                    let pkey = parameters[i].substr(pcut);\r\n\r\n                    directive.params[pkey] = pvalue;\r\n                }\r\n\r\n                directives[key] = directive;\r\n            }\r\n        }\r\n\r\n        // console.log(directives);\r\n        return directives;\r\n    }\r\n\r\n    /**\r\n     *  Returns an RFC4122 version 4 compliant GUID.\r\n     */\r\n    private guid4() {\r\n        // (c) broofa, MIT Licensed\r\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a UID for an DOM element.\r\n     * @param node \r\n     */\r\n    private getElementUID(node: Element) {\r\n        let x = this.elementUIDs.filter(e => {\r\n            return e.node === node;\r\n        })[0];\r\n\r\n        if (x) {\r\n            return x.uid;\r\n        }\r\n\r\n        let uid = this.guid4();\r\n        this.elementUIDs.push({\r\n            node: node,\r\n            uid: uid\r\n        });\r\n        this.elementByUID[uid] = node;\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise that returns validation result for each and every inputs within the form.\r\n     * @param formUID \r\n     */\r\n    private getFormValidationTask(formUID: string) {\r\n        let formInputUIDs = this.formInputs[formUID];\r\n        if (!formInputUIDs || formInputUIDs.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let formValidators: Validator[] = [];\r\n\r\n        for (let i = 0; i < formInputUIDs.length; i++) {\r\n            let inputUID = formInputUIDs[i];\r\n            formValidators.push(this.validators[inputUID]);\r\n        }\r\n\r\n        let tasks = formValidators.map(factory => factory());\r\n        return Promise.all(tasks).then(result => result.every(e => e));\r\n    }\r\n\r\n    /**\r\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\r\n     * @param form \r\n     * @param inputUID \r\n     */\r\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\r\n        let formUID = this.getElementUID(form);\r\n        if (!this.formInputs[formUID]) {\r\n            this.formInputs[formUID] = [];\r\n        }\r\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\r\n        if (add) {\r\n            this.formInputs[formUID].push(inputUID);\r\n        }\r\n\r\n        if (this.elementEvents[formUID]) {\r\n            return;\r\n        }\r\n\r\n        let cb = e => {\r\n            let validate = this.getFormValidationTask(formUID);\r\n            if (!validate) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            validate.then(success => {\r\n                if (success) {\r\n                    if(this.afterValidation){\r\n                        this.afterValidation(form);\r\n                    }\r\n                    else{\r\n                    form.submit();\r\n                    }\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n        };\r\n\r\n        form.addEventListener('submit', cb);\r\n        form.addEventListener('reset', e => {\r\n            let uids = this.formInputs[formUID];\r\n\r\n            for (let uid of uids) {\r\n                let input = this.elementByUID[uid] as HTMLInputElement;\r\n                input.classList.remove('input-validation-error');\r\n                input.classList.remove('input-validation-valid');\r\n\r\n                let spans = this.messageFor[input.name];\r\n                if (spans) {\r\n                    for (let i = 0; i < spans.length; i++) {\r\n                        spans[i].innerHTML = '';\r\n                    }\r\n                }\r\n\r\n                delete this.summary[uid];\r\n            }\r\n            this.renderSummary();\r\n        });\r\n        this.elementEvents[formUID] = cb;\r\n    }\r\n\r\n    /**\r\n     * Adds an input element to be managed and validated by the service.\r\n     * Triggers a debounced live validation when input value changes.\r\n     * @param input \r\n     */\r\n    addInput(input: HTMLInputElement) {\r\n        let uid = this.getElementUID(input);\r\n\r\n        let directives = this.parseDirectives(input.attributes);\r\n        let validate = this.createValidator(input, directives);\r\n\r\n        this.validators[uid] = validate;\r\n        if (input.form) {\r\n            this.trackFormInput(input.form, uid);\r\n        }\r\n\r\n        if (this.elementEvents[uid]) {\r\n            return;\r\n        }\r\n\r\n        let delay;\r\n        let cb = () => {\r\n            let validate = this.validators[uid];\r\n            if(!validate) return;\r\n\r\n            clearTimeout(delay);\r\n            delay = setTimeout(validate, this.debounce);\r\n        };\r\n\r\n        let isDropdown = input.tagName.toLowerCase() === 'select';\r\n        if (isDropdown) {\r\n            input.addEventListener('change', cb);\r\n        } else {\r\n            input.addEventListener('input', cb);\r\n        }\r\n\r\n        this.elementEvents[uid] = cb;\r\n    }\r\n\r\n    /**\r\n     * Removes an input element to be managed and validated by the service.\r\n     * @param input \r\n     */\r\n    removeInput(input: HTMLInputElement) {\r\n        let uid = this.getElementUID(input);\r\n\r\n        if (!this.elementEvents[uid]) {\r\n            return;\r\n        }\r\n\r\n        delete this.elementEvents[uid];\r\n        delete this.validators[uid];\r\n    }\r\n\r\n\r\n    /**\r\n     * Scans the entire document for input elements to be validated.\r\n     */\r\n    private scanInputs() {\r\n        let inputs = document.querySelectorAll('[data-val=\"true\"]');\r\n\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i] as HTMLInputElement;\r\n            this.addInput(input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a <ul> element as a validation errors summary.\r\n     */\r\n    createSummaryDOM() {\r\n        if (!Object.keys(this.summary).length) {\r\n            return null;\r\n        }\r\n\r\n        let ul = document.createElement('ul');\r\n        for (let key in this.summary) {\r\n            let li = document.createElement('li');\r\n            li.innerHTML = this.summary[key];\r\n            ul.appendChild(li);\r\n        }\r\n        return ul;\r\n    }\r\n\r\n    /**\r\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\r\n     */\r\n    private renderSummary() {\r\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\r\n        if (!summaryElements.length) {\r\n            return;\r\n        }\r\n\r\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\r\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\r\n        if (shadow === this.renderedSummaryJSON) {\r\n            return;\r\n        }\r\n\r\n        // Prevents wasteful re-rendering of summary list element with identical items!\r\n        // console.log('RENDERING VALIDATION SUMMARY');\r\n        this.renderedSummaryJSON = shadow;\r\n        let ul = this.createSummaryDOM();\r\n\r\n        for (let i = 0; i < summaryElements.length; i++) {\r\n            let e = summaryElements[i];\r\n            e.innerHTML = '';\r\n            if (ul) {\r\n                e.className = 'validation-summary-errors';\r\n                e.appendChild(ul.cloneNode(true));\r\n            } else {\r\n                e.className = 'validation-summary-valid';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input \r\n     * @param message \r\n     */\r\n    addError(input: HTMLInputElement, message: string) {\r\n        let spans = this.messageFor[input.name];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = message;\r\n                spans[i].className = 'field-validation-error';\r\n            }\r\n        }\r\n\r\n        input.classList.remove('input-validation-valid');\r\n        input.classList.add('input-validation-error');\r\n\r\n        let uid = this.getElementUID(input);\r\n        this.summary[uid] = message;\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input \r\n     */\r\n    removeError(input: HTMLInputElement) {\r\n        let spans = this.messageFor[input.name];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = '';\r\n                spans[i].className = 'field-validation-valid';\r\n            }\r\n        }\r\n\r\n        input.classList.remove('input-validation-error');\r\n        input.classList.add('input-validation-valid');\r\n\r\n        let uid = this.getElementUID(input);\r\n        delete this.summary[uid];\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param input Validates a single input element\r\n     * @returns true on valid\r\n     */\r\n    validateElement(input: HTMLInputElement): Promise<boolean> {\r\n        let uid = this.getElementUID(input);\r\n        let validate = this.validators[uid];\r\n        return validate();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param form Validates a form. No callback is issued.\r\n     * @returns true on valid\r\n     */\r\n    validateForm(form: HTMLFormElement): Promise<boolean> {\r\n        const formUID = this.getElementUID(form);\r\n        const validate = this.getFormValidationTask(formUID);\r\n        if (!validate) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        return validate;\r\n    }\r\n\r\n    /**\r\n     * Returns a validation Promise factory for an input element, using given validation directives.  \r\n     * @param input \r\n     * @param directives \r\n     */\r\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\r\n        return async () => {\r\n            for (let key in directives) {\r\n                let directive = directives[key];\r\n                let provider = this.providers[key];\r\n\r\n                if (!provider) {\r\n                    console.log('aspnet-validation provider not implemented: ' + key);\r\n                    continue;\r\n                }\r\n\r\n                let result = provider(input.value, input, directive.params);\r\n                let valid = false;\r\n                let error = directive.error;\r\n\r\n                if (typeof result === 'boolean') {\r\n                    valid = result;\r\n                } else if (typeof result === 'string') {\r\n                    valid = false;\r\n                    error = result;\r\n                } else {\r\n                    let resolution = await result;\r\n                    if (typeof resolution === 'boolean') {\r\n                        valid = resolution;\r\n                    } else {\r\n                        valid = false;\r\n                        error = resolution;\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    this.addError(input, error);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            this.removeError(input);\r\n            return true;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Load default validation providers and scans the entire document when ready.\r\n     */\r\n    bootstrap() {\r\n        this.addMvcProviders();\r\n\r\n        window.addEventListener('load', () => {\r\n            this.scanMessages();\r\n            this.scanInputs();\r\n        });\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getRelativeFormElement","elementName","selector","realSelector","substr","dotLocation","lastIndexOf","relativeElementName","relativeElement","document","getElementsByName","required","element","params","Boolean","stringLength","min","parseInt","length","max","compare","other","otherElement","name","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","n","cDigit","nCheck","nDigit","bEven","replace","charAt","url","phone","remote","fieldSelectors","additionalfields","split","fields","fieldSelector","fieldName","fieldElement","encodedParams","encodedParam","encodeURIComponent","push","payload","join","Promise","ok","reject","request","XMLHttpRequest","type","postData","FormData","append","open","setRequestHeader","send","onload","e","status","data","JSON","parse","responseText","statusText","onerror","providers","messageFor","elementUIDs","elementByUID","formInputs","validators","elementEvents","summary","debounce","addProvider","callback","this","addMvcProviders","mvc","MvcValidationProviders","scanMessages","validationMessageElements","querySelectorAll","i","getAttribute","parseDirectives","attributes","directives","validationAtributes","a","indexOf","parameters","keys","filter","Q","directive","error","pcut","pvalue","pkey","guid4","c","r","Math","random","toString","getElementUID","node","x","uid","getFormValidationTask","formUID","formInputUIDs","formValidators","inputUID","tasks","map","all","then","result","every","trackFormInput","form","cb","validate","preventDefault","success","afterValidation","submit","catch","console","log","addEventListener","input","classList","remove","spans","innerHTML","renderSummary","addInput","createValidator","delay","clearTimeout","setTimeout","tagName","toLowerCase","removeInput","scanInputs","inputs","createSummaryDOM","ul","createElement","li","appendChild","summaryElements","shadow","stringify","sort","renderedSummaryJSON","className","cloneNode","addError","message","add","removeError","validateElement","validateForm","resolve","provider","valid","resolution","bootstrap","window"],"sourceRoot":""}